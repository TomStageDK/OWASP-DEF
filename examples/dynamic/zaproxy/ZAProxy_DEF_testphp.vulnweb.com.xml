<?xml version="1.0"?>
<OWASP-DEF SpecVersion="0.1">
    <Session-Reference>ZAProxy scan of http://testphp.vulnweb.com</Session-Reference>
    <Date-Time>Tue, 6 May 2014 18:10:27</Date-Time>
	<Scan type="dynamic">
		<Host name="testphp.vulnweb.com" ip-address="176.28.50.165">
			<Port protocol="TCP" portid="80">
				<Service name="" product="" version="" />
			    <Software-Name>ZAProxy</Software-Name>
			    <Software-Version>2.3.0.1</Software-Version>
			    <Software-Arguments></Software-Arguments>
			    <Software-Additional>
			    	<Data name=""></Data>
				</Software-Additional>
				<Vulnerability Severity="Low">
					<Finding NativeID="10021" IdentifiedTimestamp="" UniqueID="">
					    <Summary>X-Content-Type-Options header missing</Summary>
					    <Description>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'.
				This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type.
				Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
						</Description>
					    <Confidence Level="2" AuditStatus="UnAudited" />
					    <Background></Background>
					    <Remediation>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.
				If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
						</Remediation>
					    <Further-Information>
					    	<Further-Info name="" url="" />
					    </Further-Information>
						<Classifications>
							<Classification type="" id="" href=""></Classification>
						</Classifications>
					    <Additional-Data>
					    	<Data name=""></Data>
					    </Additional-Data>
						<Page>
						    <Page-Reference>Frontpage</Page-Reference>
						    <URL>http://testphp.vulnweb.com</URL>
						    <Method></Method>
						    <HTTPVersion></HTTPVersion>
						    <StatusCode></StatusCode>
			    			<Language></Language>
							<Parameters>
							    <Parameter></Parameter>
							</Parameters>
							<Request-Response>
							    <Request>
							    	<Request-Raw></Request-Raw>
									<Request-Headers>
										<Data name=""></Data>
									</Request-Headers>
								    <Request-Cookie>
										<Data name=""></Data>
								    </Request-Cookie>
									<Additional-RequestData>
										<Data name=""></Data>
									</Additional-RequestData>
							    </Request>
							    <Response>
							    	<Response-Raw></Response-Raw>
									<Response-Headers>
										<Data name=""></Data>
									</Response-Headers>
								    <Response-Cookie>
										<Data name=""></Data>
								    </Response-Cookie>
									<Additional-ResponseData>
										<Data name=""></Data>
									</Additional-ResponseData>
									<Response-ScreenShot></Response-ScreenShot>
							    </Response>
							</Request-Response>
						</Page>
					</Finding>
				</Vulnerability>
				<Vulnerability Severity="High">
					<Finding NativeID="40018" IdentifiedTimestamp="" UniqueID="">
					    <Summary>SQL Injection - MySQL</Summary>
					    <Description>SQL injection may be possible</Description>
					    <Confidence Level="2" AuditStatus="UnAudited" />
					    <Background>RDBMS [MySQL] likely, given UNION-specific error message fragment [The used SELECT statements have a different number of columns] in HTML results
			The vulnerability was detected by manipulating the parameter with an SQL UNION clause to cause a database error message to be returned and recognised
						</Background>
					    <Remediation>Do not trust client side input, even if there is client side validation in place.  
				In general, type check all data on the server side.
				If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'
				If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.
				If database Stored Procedures can be used, use them.
				Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!
				Do not create dynamic SQL queries using simple string concatenation.
				Escape all data received from the client.
				Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.
				Apply the privilege of least privilege by using the least privileged database user possible.
				In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.
				Grant the minimum database access that is necessary for the application.
						</Remediation>
					    <Further-Information>
					    	<Further-Info name="" url="https://www.owasp.org/index.php/Top_10_2010-A1" />
					    </Further-Information>
						<Classifications>
							<Classification type="CWE" id="89" href=""></Classification>
							<Classification type="WASC" id="19" href=""></Classification>
						</Classifications>
					    <Additional-Data>
					    	<Data name="OtherInfo">RDBMS [MySQL] likely, given UNION-specific error message fragment [The used SELECT statements have a different number of columns] in HTML results
				The vulnerability was detected by manipulating the parameter with an SQL UNION clause to cause a database error message to be returned and recognised
							</Data>
					    </Additional-Data>
						<Page>
						    <Page-Reference>newuser.php</Page-Reference>
						    <URL>http://testphp.vulnweb.com/secured/newuser.php</URL>
						    <Method></Method>
						    <HTTPVersion></HTTPVersion>
						    <StatusCode></StatusCode>
			    			<Language></Language>
							<Parameters>
							    <Parameter>uuname</Parameter>
							</Parameters>
							<Request-Response>
							    <Request>
							    	<Request-Raw></Request-Raw>
									<Request-Headers>
										<Data name=""></Data>
									</Request-Headers>
								    <Request-Cookie>
										<Data name=""></Data>
								    </Request-Cookie>
									<Additional-RequestData>
										<Data name=""></Data>
									</Additional-RequestData>
							    </Request>
							    <Response>
							    	<Response-Raw></Response-Raw>
									<Response-Headers>
										<Data name=""></Data>
									</Response-Headers>
								    <Response-Cookie>
										<Data name=""></Data>
								    </Response-Cookie>
									<Additional-ResponseData>
										<Data name="attack">ZAP' UNION ALL select NULL -- </Data>
									</Additional-ResponseData>
									<Response-ScreenShot></Response-ScreenShot>
							    </Response>
							</Request-Response>
						</Page>
					</Finding>
				</Vulnerability>
			</Port>
		</Host>
	</Scan>
</OWASP-DEF>
